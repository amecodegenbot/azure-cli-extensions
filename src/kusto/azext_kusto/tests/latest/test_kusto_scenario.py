# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

import os
from azure.cli.testsdk import ScenarioTest
from azure.cli.testsdk import ResourceGroupPreparer
from .example_steps import step_cluster_create
from .example_steps import step_database_create
from .example_steps import step_data_connection_event_hub_create
from .example_steps import step_attached_database_configuration_create
from .example_steps import step_attached_database_configuration_show
from .example_steps import step_data_connection_show
from .example_steps import step_database_list
from .example_steps import step_attached_database_configuration_list
from .example_steps import step_database_show
from .example_steps import step_cluster_list_sku
from .example_steps import step_cluster_show
from .example_steps import step_cluster_list
from .example_steps import step_data_connection_event_hub_update
from .example_steps import step_data_connection_event
from .example_steps import step_database_update
from .example_steps import step_cluster_detach_follower_database
from .example_steps import step_cluster_list_follower_database
from .example_steps import step_attached_database_configuration_delete
from .example_steps import step_data_connection_delete
from .example_steps import step_database_delete
from .example_steps import step_cluster_delete
from .. import (
    try_manual,
    raise_if,
    calc_coverage
)


TEST_DIR = os.path.abspath(os.path.join(os.path.abspath(__file__), '..'))


# Env setup_scenario
@try_manual
def setup_scenario(test, rg):
    pass


# Env cleanup_scenario
@try_manual
def cleanup_scenario(test, rg):
    pass


# Testcase: Scenario
@try_manual
def call_scenario(test, rg):
    setup_scenario(test, rg)
    step_cluster_create(test, rg, checks=[])
    step_database_create(test, rg, checks=[])
    step_data_connection_event_hub_create(test, rg, checks=[])
    step_attached_database_configuration_create(test, rg, checks=[])
    step_attached_database_configuration_show(test, rg, checks=[])
    step_data_connection_show(test, rg, checks=[])
    step_database_list(test, rg, checks=[])
    step_attached_database_configuration_list(test, rg, checks=[])
    step_database_show(test, rg, checks=[])
    step_database_list(test, rg, checks=[])
    step_cluster_list_sku(test, rg, checks=[])
    step_cluster_show(test, rg, checks=[])
    step_cluster_list(test, rg, checks=[])
    # STEP NOT FOUND: KustoOperationsList
    step_data_connection_event_hub_update(test, rg, checks=[])
    step_data_connection_event(test, rg, checks=[])
    # STEP NOT FOUND: KustoDataConnectionsCheckNameAvailability
    step_database_update(test, rg, checks=[])
    step_cluster_detach_follower_database(test, rg, checks=[])
    # STEP NOT FOUND: KustoDatabaseCheckNameAvailability
    step_cluster_list_follower_database(test, rg, checks=[])
    # STEP NOT FOUND: KustoClustersCheckNameAvailability
    step_attached_database_configuration_delete(test, rg, checks=[])
    step_data_connection_delete(test, rg, checks=[])
    step_database_delete(test, rg, checks=[])
    step_cluster_delete(test, rg, checks=[])
    cleanup_scenario(test, rg)


# Test class for Scenario
@try_manual
class KustoScenarioTest(ScenarioTest):

    def __init__(self, *args, **kwargs):
        super(KustoScenarioTest, self).__init__(*args, **kwargs)
        self.kwargs.update({
            'subscription_id': self.get_subscription_id()
        })

        self.kwargs.update({
            'myCluster4': 'default',
            'myAttachedDatabaseConfiguration3': 'default',
            'myCluster2': 'leader4',
            'myCluster3': 'KustoClusterLeader',
            'myCluster': self.create_random_name(prefix='kustoclusterrptest4'[:9], length=19),
            'myAttachedDatabaseConfiguration': 'myAttachedDatabaseConfiguration',
            'myAttachedDatabaseConfiguration2': self.create_random_name(prefix='attachedDatabaseConfigurations1'[:15],
                                                                        length=31),
            'myDataConnection': self.create_random_name(prefix='DataConnections8'[:8], length=16),
            'myDataConnection2': 'kustoeventhubconnection1',
        })


    @ResourceGroupPreparer(name_prefix='clitestkusto_kustorptest'[:7], key='rg', parameter_name='rg')
    def test_kusto_Scenario(self, rg):
        call_scenario(self, rg)
        calc_coverage(__file__)
        raise_if()

